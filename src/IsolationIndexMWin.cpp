/*  Copyright (C) 2001-2009 National Institute For Space Research (INPE) - Brazil.

    This file is part of the TerraLib - a Framework for building GIS enabled applications.

    TerraLib is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.

    TerraLib is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with TerraLib. See COPYING. If not, write to
    TerraLib Team at <terralib-team@terralib.org>.
 */

/*!
	\file IsolationIndexMWin.cpp 
	\brief Class that implements an user graphic interface to calculates the Spatial Isolation Index of Group m.
	\author Douglas Uba <douglas@dpi.inpe.br>
*/

// TerraSegreg
#include "IsolationIndexMWin.h"
#include "IsolationIndexM.h"
#include "Utils.h"

// TerraLib
#include <PluginParameters.h>
#include <TeSTEFunctionsDB.h>

// TerraView
#include <help.h>
#include <TeQtGrid.h>

// Qt
#include <qbuttongroup.h>
#include <qcombobox.h>
#include <qcheckbox.h>
#include <qmessagebox.h>
#include <qtable.h>

IsolationIndexMWin::IsolationIndexMWin(PluginParameters* pp)
: SpatialIndexWin(pp)
{
	// Configures the user interface
	groupNButtonGroup->hide();

	// Builds the group table
	groupsTable->setNumCols(2);
	QStringList colsNames;
	colsNames.push_back(tr("Population group"));
	colsNames.push_back(tr("Local Population Intensity"));
	groupsTable->setColumnLabels(colsNames);
    
	// Adjusts groups table
    groupsTable->setColumnStretchable(0, true);
    groupsTable->setColumnStretchable(1, true);

	// Specified Spatial Index
	m_spatialIndex = new IsolationIndexM();
	m_helpPath = "TerraSegreg/IsolationIndexM.html";
} 

IsolationIndexMWin::~IsolationIndexMWin()
{}

void IsolationIndexMWin::verifyPushButton_clicked()
{
	SpatialIndexWin::verifyPushButton_clicked();

    if(m_groups.empty())
		return;

    // Builds the population groups table
    groupsTable->setNumRows(m_groups.size());
    int row = 0;
    std::map<std::string, std::string>::iterator it;
    for(it = m_groups.begin(); it != m_groups.end(); ++it)
    {
        groupsTable->setText(row, 0, it->first.c_str());
        groupsTable->setText(row, 1, it->second.c_str());
		groupMComboBox->insertItem(it->first.c_str());
        row++;
    }
}

bool IsolationIndexMWin::configureSpatialIndex()
{
	// Configures Spatial Isolation Index of Group m.
	IsolationIndexM* ii = dynamic_cast<IsolationIndexM*>(m_spatialIndex);

	std::string gm = groupMComboBox->currentText().latin1();
	ii->setGroupM(gm);
	
	return true;
}

void IsolationIndexMWin::update(TeSTElementSet* objSet)
{
	m_pp->teqtgrid_ptr_->clearPortal();

	TeTheme* theme = objSet->theme();

	// Updates the database
	if(!TeUpdateDBFromSet(objSet, theme->layer()->attrTables()[0].name()))
	{
		QString msg = tr("Error updating the theme table.") + "\n";
		msg += tr("Details:") + " " + m_pp->getCurrentDatabasePtr()->errorMessage().c_str();
		QMessageBox::critical(this, tr("Error"), msg);
		return;
	}

	// Generates map with local indexes
    if(generateMapCheckBox->isChecked())
    {
        std::string errorMessage; // TODO: review the error message generated by Util class.
        if(!m_utils->generateMap(theme, m_spatialIndex->getIndexAttributeName(), errorMessage))
			QMessageBox::critical(this, tr("Error"), tr("Error generating the map with local indexes."));
    }
    
	QMessageBox::information(this, tr("Information"), tr("Spatial Isolation Index of Group m calculated with successful."));
}

	